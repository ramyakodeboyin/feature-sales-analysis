

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%config InlineBackend.figure_format = 'svg'

import warnings
warnings.filterwarnings('ignore')

item_categories = pd.read_csv('../input/competitive-data-science-predict-future-sales/item_categories.csv')
item_categories.info()
item_categories.head()


Output:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 84 entries, 0 to 83
Data columns (total 2 columns):
 #   Column              Non-Null Count  Dtype 
---  ------              --------------  ----- 
 0   item_category_name  84 non-null     object
 1   item_category_id    84 non-null     int64 
dtypes: int64(1), object(1)
memory usage: 1.4+ KB





Code:
items = pd.read_csv('../input/competitive-data-science-predict-future-sales/items.csv')
items.info()
items.head()

Output:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 22170 entries, 0 to 22169
Data columns (total 3 columns):
 #   Column            Non-Null Count  Dtype 
---  ------            --------------  ----- 
 0   item_name         22170 non-null  object
 1   item_id           22170 non-null  int64 
 2   item_category_id  22170 non-null  int64 
dtypes: int64(2), object(1)
memory usage: 519.7+ KB

Code:
shops = pd.read_csv("../input/competitive-data-science-predict-future-sales/shops.csv")
shops.info()
shops.head()

Output:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 60 entries, 0 to 59





Data columns (total 2 columns):
 #   Column     Non-Null Count  Dtype 
---  ------     --------------  ----- 

 0   shop_name  60 non-null     object

 1   shop_id    60 non-null     int64 
dtypes: int64(1), object(1)
memory usage: 1.1+ KB

Code:
sales = pd.read_csv('../input/competitive-data-science-predict-future-sales/sales_train.csv')
sales.info()
sales.head()

Output:
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2935849 entries, 0 to 2935848
Data columns (total 6 columns):
 #   Column          Dtype  
---  ------          -----  
 0   date            object 
 1   date_block_num  int64  
 2   shop_id         int64  
 3   item_id         int64  
 4   item_price      float64
 5   item_cnt_day    float64
dtypes: float64(2), int64(3), object(1)
memory usage: 134.4+ MB
23
Code:
sales['year'] = pd.DatetimeIndex(sales['date']).year
sales['month'] = pd.DatetimeIndex(sales['date']).month
sales['year'].unique()
sales.head()
sns.countplot(sales['year'], palette='Set2')
fig, ax = plt.subplots(figsize=(10,5))

plt.xticks([i for i in range(1,13)])
sales.groupby(sales[sales['year']==2013].month).count()['item_id'].plot(ax=ax, label=2013, color='green')
sales.groupby(sales[sales['year']==2014].month).count()['item_id'].plot(label=2014, color='orange')
sales.groupby(sales[sales['year']==2015].month).count()['item_id'].plot(label=2015, color='blue')
plt.grid("on")
plt.ylabel('value_counts')
plt.title("ItemSalespermonth")
plt.legend()
len(shops['shop_id'])
sales.groupby(sales['shop_id']).agg({'item_id': 'count'}).mean()
fig, ax = plt.subplots(figsize=(10,5))
sales.groupby(sales['shop_id']).agg({'item_id': 'count'}).plot.bar(ax=ax)
y_avg = sales.groupby(sales['shop_id']).agg({'item_id': 'count'}).mean()
ax.hlines(y_avg, xmin=0, xmax=60, linewidth=2, color='r',label='mean')
ax.hlines(120000, xmin=0, xmax=60, linewidth=2, color='g',label='120,000')



plt.ylabel('value_counts')
plt.legend()
sales['shop_id'].value_counts().head()

fig, ax = plt.subplots(figsize=(10,5))
items.item_category_id.value_counts().iloc[:50].plot.bar(ax=ax)
plt.xlabel('item_id')
plt.ylabel('value_counts')